type Type29 @extends @key(fields: "field109") {
  field109: Int! @external
}

type Mutation @extends {
  field27488(arg20: Input6178!): Type13965!
}

type Type119 {
  field569: String
  field570: Boolean!
  field571: Boolean!
  field572: String
}

type Type13957 {
  field108: Type29
}

type Type13958 {
  field176: [Type13959!]
  field366: Type119!
}

type Type13959 {
  field369: String
  field177: Type13957!
}

type Type13960 {
  field554: Float!
  field3673: Float
  field3674: Float
  field3675: ID
  field556: ID!
  field3677: ID!
  field7346: Type13957!
  field7347: String!
}

type Type13961 {
  field176: [Type13962!]
  field366: Type119!
}

type Type13962 {
  field369: String
  field177: Type13960!
}

type Type3161 @key(fields: "field556") {
  field554: Float!
  field198: String
  field27489: Type13958!
  field27490: Type13961!
  field555: ID
  field556: ID!
  field557: String!
  field558: String!
  field559: ID
  field560: ID!
  field100: Enum3185!
  field58: String
}

type Type13963 {
  field176: [Type13964!]
  field366: Type119!
}

type Type13964 {
  field369: String
  field177: Type3161!
}

type Query @extends {
  field27491(arg49: ID!): Type3161
  field27492(arg20: Input48!): Type13963!
}

type Type13965 {
  field575: Type3161
}

enum Enum3185 {
  VALUE_212
  VALUE_164
  VALUE_171
  VALUE_165
  VALUE_162
}

input Input6176 {
  inputField187: Input6177!
}

input Input6177 {
  inputField187: Int!
}

input Input48 {
  inputField113: String!
  inputField114: Boolean! = false
}

input Input50 {
  "This is an anonymized description"
  inputField116: String
  "This is an anonymized description"
  inputField117: Int!
  "This is an anonymized description"
  inputField118: Int!
  "This is an anonymized description"
  inputField119: Int!
}

input Input6178 {
  inputField120: String
  inputField110: String
  inputField111: String
  inputField121: String
  inputField135: Input6176!
  inputField123: Input50
  inputField125: String
  inputField126: String
}