type Type16842 {
  field3449: String
  field133: String
  field3448: String
}

type Type16843 {
  field177: [Type16844!]
  field379: Type119!
}

type Type16844 {
  field382: String
  field178: Type16842!
}

type Type3097 @key(fields: "field569") {
  field567: Float!
  field200: String
  field32969: Type16843!
  field568: ID
  field569: ID!
  field570: String!
  field571: String!
  field572: ID
  field573: ID!
  field100: Enum4019!
  field58: String
}

type Type16845 {
  field177: [Type16846!]
  field379: Type119!
}

type Type16846 {
  field382: String
  field178: Type3097!
}

type Mutation @extends {
  field32970(arg20: Input7895!): Type16847!
}

type Type119 {
  field582: String
  field583: Boolean!
  field584: Boolean!
  field585: String
}

type Query @extends {
  field32971(arg49: ID!): Type3097
  field32972(arg20: Input48!): Type16845!
}

type Type16847 {
  field588: Type3097
}

enum Enum4019 {
  VALUE_212
  VALUE_164
  VALUE_171
  VALUE_165
  VALUE_162
}

input Input7890 {
  inputField11271: Input7891!
}

input Input7891 {
  inputField11272: Input7892!
}

input Input7892 {
  inputField10505: String!
}

input Input7893 {
  inputField5100: String!
  inputField5040: Input7894
}

input Input7894 {
  inputField11273: Input7890!
}

input Input48 {
  inputField113: String!
  inputField114: Boolean! = false
}

input Input50 {
  "This is an anonymized description"
  inputField116: String
  "This is an anonymized description"
  inputField117: Int!
  "This is an anonymized description"
  inputField118: Int!
  "This is an anonymized description"
  inputField119: Int!
}

input Input7895 {
  inputField120: String
  inputField110: String
  inputField111: String
  inputField121: String
  inputField135: Input7893!
  inputField123: Input50
  inputField125: String
  inputField126: String
}