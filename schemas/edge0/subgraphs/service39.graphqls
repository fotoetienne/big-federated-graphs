type Type541 @key(fields: "field569") {
  field567: Float!
  field200: String
  field568: ID
  field569: ID!
  field570: String!
  field571: String!
  field572: ID
  field573: ID!
  field100: Enum174!
  field58: String
}

type Type542 {
  field177: [Type543!]
  field379: Type119!
}

type Type543 {
  field382: String
  field178: Type541!
}

type Mutation @extends {
  field1759(arg20: Input245!): Type544!
}

type Type119 {
  field582: String
  field583: Boolean!
  field584: Boolean!
  field585: String
}

type Query @extends {
  field1760(arg49: ID!): Type541
  field1761(arg20: Input48!): Type542!
}

type Type544 {
  field588: Type541
}

enum Enum174 {
  VALUE_212
  VALUE_164
  VALUE_171
  VALUE_165
  VALUE_162
}

enum Enum31 {
  VALUE_214
  VALUE_215
}

input Input244 {
  inputField187: Int!
}

input Input48 {
  inputField113: String!
  inputField114: Boolean! = false
}

input Input49 {
  inputField16: String!
  "This is an anonymized description"
  inputField115: Enum31!
}

input Input50 {
  "This is an anonymized description"
  inputField116: String
  "This is an anonymized description"
  inputField117: Int!
  "This is an anonymized description"
  inputField118: Int!
  "This is an anonymized description"
  inputField119: Int!
}

input Input245 {
  inputField120: String
  inputField110: String
  "This is an anonymized description"
  inputField111: String
  inputField121: String
  inputField135: Input244!
  "This is an anonymized description"
  inputField122: Input49
  "This is an anonymized description"
  inputField123: Input50
  "This is an anonymized description"
  inputField124: String
  "This is an anonymized description"
  inputField125: String
  "This is an anonymized description"
  inputField126: String
}