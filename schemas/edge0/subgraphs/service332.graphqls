type Type7794 {
  field252: Float!
  field253: String
  field16095: Type417!
  field254: ID
  field255: ID!
  field256: String!
  field257: String!
  field258: ID
  field259: ID!
  field260: Enum1825!
  field44: String
}

type Type7795 {
  field36: [Type7796!]
  field37: Type122!
}

type Type7796 {
  field41: String
  field40: Type7794!
}

type Type32 @extends @key(fields: "field107") {
  field107: Int! @external
}

type Type417 {
  field36: [Type418!]
  field37: Type122!
}

type Type418 {
  field41: String
  field40: Type32!
}

type Mutation @extends {
  field16096(arg1: Input3504!): Type7797!
}

type Type122 {
  field269: String
  field270: Boolean!
  field271: Boolean!
  field272: String
}

type Query @extends {
  field16097(arg33: ID!): Type7794
  field16098(arg1: Input48!): Type7795!
}

type Type7797 {
  field275: Type7794
}

enum Enum1825 {
  VALUE_199
  VALUE_151
  VALUE_158
  VALUE_152
  VALUE_149
}

input Input3502 {
  inputField579: Input3503
}

input Input3503 {
  inputField3145: Int!
  inputField3146: Int!
}

input Input48 {
  inputField106: String!
  inputField107: Boolean! = false
}

input Input50 {
  "This is an anonymized description"
  inputField109: String
  "This is an anonymized description"
  inputField110: Int!
  "This is an anonymized description"
  inputField111: Int!
  "This is an anonymized description"
  inputField112: Int!
}

input Input3504 {
  inputField113: String
  inputField103: String
  inputField104: String
  inputField114: String
  inputField128: Input3502!
  inputField116: Input50
  inputField118: String
  inputField119: String
}
