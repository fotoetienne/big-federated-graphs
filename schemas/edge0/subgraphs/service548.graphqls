type Type13546 {
  field252: Float!
  field253: String
  field254: ID
  field255: ID!
  field256: String!
  field257: String!
  field258: ID
  field259: ID!
  field260: Enum3180!
  field44: String
}

type Type13547 {
  field36: [Type13548!]
  field37: Type122!
}

type Type13548 {
  field41: String
  field40: Type13546!
}

type Type13549 {
  field484: Int!
}

type Type13550 {
  field263: String!
  field264: Type13549
  field260: String!
}

type Mutation @extends {
  field27275(arg1: Input6132!): Type431!
  field27276(arg1: Input6134!): Type13550!
  field27277(arg1: Input6134!): Type431!
}

type Type122 {
  field269: String
  field270: Boolean!
  field271: Boolean!
  field272: String
}

type Query @extends {
  field27278(arg33: ID!): Type13546
  field27279(arg1: Input48!): Type13547!
}

type Type431 {
  field263: String!
  field260: String!
}

enum Enum3180 {
  VALUE_199
  VALUE_151
  VALUE_158
  VALUE_152
  VALUE_149
}

input Input6132 {
  inputField103: String
  inputField104: String
  inputField333: Input6133!
  inputField105: String!
}

input Input6133 {
  inputField3145: Int!
  inputField3146: Int!
}

input Input6134 {
  inputField103: String
  inputField104: String
  inputField333: Input6135!
  inputField105: String!
}

input Input6135 {
  inputField3145: Int!
  inputField3146: Int!
}

input Input48 {
  inputField106: String!
  inputField107: Boolean! = false
}
