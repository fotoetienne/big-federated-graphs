type Type8096 {
  field554: Float!
  field198: String
  field16797: Type432!
  field555: ID
  field556: ID!
  field557: String!
  field558: String!
  field559: ID
  field560: ID!
  field100: Enum1925!
  field58: String
}

type Type8097 {
  field176: [Type8098!]
  field366: Type119!
}

type Type8098 {
  field369: String
  field177: Type8096!
}

type Type29 @extends @key(fields: "field109") {
  field109: Int! @external
}

type Type432 {
  field176: [Type433!]
  field366: Type119!
}

type Type433 {
  field369: String
  field177: Type29!
}

type Mutation @extends {
  field16798(arg20: Input3602!): Type8099!
}

type Type119 {
  field569: String
  field570: Boolean!
  field571: Boolean!
  field572: String
}

type Query @extends {
  field16799(arg49: ID!): Type8096
  field16800(arg20: Input48!): Type8097!
}

type Type8099 {
  field575: Type8096
}

enum Enum1925 {
  VALUE_212
  VALUE_164
  VALUE_171
  VALUE_165
  VALUE_162
}

input Input3600 {
  inputField599: Input3601
}

input Input3601 {
  inputField3224: Int!
  inputField3225: Int!
}

input Input48 {
  inputField113: String!
  inputField114: Boolean! = false
}

input Input50 {
  "This is an anonymized description"
  inputField116: String
  "This is an anonymized description"
  inputField117: Int!
  "This is an anonymized description"
  inputField118: Int!
  "This is an anonymized description"
  inputField119: Int!
}

input Input3602 {
  inputField120: String
  inputField110: String
  inputField111: String
  inputField121: String
  inputField135: Input3600!
  inputField123: Input50
  inputField125: String
  inputField126: String
}