type Type8102 {
  field567: Float!
  field200: String
  field16821: Type432!
  field568: ID
  field569: ID!
  field570: String!
  field571: String!
  field572: ID
  field573: ID!
  field100: Enum1928!
  field58: String
}

type Type8103 {
  field177: [Type8104!]
  field379: Type119!
}

type Type8104 {
  field382: String
  field178: Type8102!
}

type Type29 @extends @key(fields: "field109") {
  field109: Int! @external
}

type Type432 {
  field177: [Type433!]
  field379: Type119!
}

type Type433 {
  field382: String
  field178: Type29!
}

type Mutation @extends {
  field16822(arg20: Input3604!): Type8105!
}

type Type119 {
  field582: String
  field583: Boolean!
  field584: Boolean!
  field585: String
}

type Query @extends {
  field16823(arg49: ID!): Type8102
  field16824(arg20: Input48!): Type8103!
}

type Type8105 {
  field588: Type8102
}

enum Enum1928 {
  VALUE_212
  VALUE_164
  VALUE_171
  VALUE_165
  VALUE_162
}

input Input3602 {
  inputField599: Input3603
}

input Input3603 {
  inputField3228: Int!
  inputField3229: Int!
}

input Input48 {
  inputField113: String!
  inputField114: Boolean! = false
}

input Input50 {
  "This is an anonymized description"
  inputField116: String
  "This is an anonymized description"
  inputField117: Int!
  "This is an anonymized description"
  inputField118: Int!
  "This is an anonymized description"
  inputField119: Int!
}

input Input3604 {
  inputField120: String
  inputField110: String
  inputField111: String
  inputField121: String
  inputField135: Input3602!
  inputField123: Input50
  inputField125: String
  inputField126: String
}