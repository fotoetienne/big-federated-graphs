type Mutation @extends {
  field679(arg20: Input55!): Type161!
}

type Type119 {
  field569: String
  field570: Boolean!
  field571: Boolean!
  field572: String
}

type Query @extends {
  field680(arg49: ID!): Type165
  field681(arg20: Input48!): Type166!
}

type Type161 {
  field575: Type165
}

type Type162 {
  field682: String!
}

type Type163 {
  field176: [Type164!]
  field366: Type119!
}

type Type164 {
  field369: String
  field177: Type162!
}

type Type165 {
  field554: Float!
  field198: String
  field683: Type163!
  field555: ID
  field556: ID!
  field557: String!
  field558: String!
  field559: ID
  field560: ID!
  field100: Enum35!
  field58: String
}

type Type166 {
  field176: [Type167!]
  field366: Type119!
}

type Type167 {
  field369: String
  field177: Type165!
}

enum Enum35 {
  VALUE_212
  VALUE_164
  VALUE_171
  VALUE_165
  VALUE_162
}

input Input48 {
  inputField113: String!
  inputField114: Boolean! = false
}

input Input50 {
  "This is an anonymized description"
  inputField116: String
  "This is an anonymized description"
  inputField117: Int!
  "This is an anonymized description"
  inputField118: Int!
  "This is an anonymized description"
  inputField119: Int!
}

input Input55 {
  inputField120: String
  inputField110: String
  inputField111: String
  inputField121: String
  inputField135: Input57!
  inputField123: Input50
  inputField125: String
  inputField126: String
}

input Input56 {
  inputField16: String!
  inputField17: String
}

input Input57 {
  inputField57: Input56!
}