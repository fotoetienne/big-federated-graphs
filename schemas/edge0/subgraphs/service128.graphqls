type Mutation @extends {
  field7343(arg20: Input1374!): Type4009!
}

type Type119 {
  field569: String
  field570: Boolean!
  field571: Boolean!
  field572: String
}

type Query @extends {
  field7344(arg49: ID!): Type4014
  field7345(arg20: Input48!): Type4015!
}

type Type4009 {
  field575: Type4014
}

type Type4010 {
  field2: String!
}

type Type4011 {
  field554: Float!
  field3673: Float
  field3674: Float
  field3675: ID
  field556: ID!
  field3677: ID!
  field7346: Type4010!
  field7347: String!
}

type Type4012 {
  field176: [Type4013!]
  field366: Type119!
}

type Type4013 {
  field369: String
  field177: Type4011!
}

type Type4014 {
  field554: Float!
  field198: String
  field555: ID
  field556: ID!
  field557: String!
  field558: String!
  field559: ID
  field560: ID!
  field7348: Type4020!
  field7349: Type4012!
  field100: Enum783!
  field58: String
}

type Type4015 {
  field176: [Type4016!]
  field366: Type119!
}

type Type4016 {
  field369: String
  field177: Type4014!
}

type Type4017 {
  field11: String!
  field636: Type4018!
  field7350: [String!]!
  field7351: [Type4018!]!
}

type Type4018 {
  field7352: Type4010
  field7353: String
  field2742: Type4010!
  field94: String!
  field7354: Type4010!
  field7355: String!
}

type Type4019 {
  field1775: [Type4017!]!
}

type Type4020 {
  field176: [Type4021!]
  field366: Type119!
}

type Type4021 {
  field369: String
  field177: Type4019!
}

enum Enum783 {
  VALUE_212
  VALUE_164
  VALUE_171
  VALUE_165
  VALUE_162
}

input Input48 {
  inputField113: String!
  inputField114: Boolean! = false
}

input Input50 {
  "This is an anonymized description"
  inputField116: String
  "This is an anonymized description"
  inputField117: Int!
  "This is an anonymized description"
  inputField118: Int!
  "This is an anonymized description"
  inputField119: Int!
}

input Input1374 {
  inputField120: String
  inputField110: String
  inputField111: String
  inputField121: String
  inputField123: Input50
  inputField125: String
  inputField126: String
}