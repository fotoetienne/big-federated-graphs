type Type8092 {
  field554: Float!
  field198: String
  field555: ID
  field556: ID!
  field557: String!
  field558: String!
  field559: ID
  field560: ID!
  field100: Enum1924!
  field58: String
}

type Type8093 {
  field176: [Type8094!]
  field366: Type119!
}

type Type8094 {
  field369: String
  field177: Type8092!
}

type Mutation @extends {
  field16794(arg20: Input3599!): Type8095!
}

type Type119 {
  field569: String
  field570: Boolean!
  field571: Boolean!
  field572: String
}

type Query @extends {
  field16795(arg49: ID!): Type8092
  field16796(arg20: Input48!): Type8093!
}

type Type8095 {
  field575: Type8092
}

enum Enum1924 {
  VALUE_212
  VALUE_164
  VALUE_171
  VALUE_165
  VALUE_162
}

input Input3597 {
  inputField599: Input3598
}

input Input3598 {
  inputField64: String
}

input Input48 {
  inputField113: String!
  inputField114: Boolean! = false
}

input Input50 {
  "This is an anonymized description"
  inputField116: String
  "This is an anonymized description"
  inputField117: Int!
  "This is an anonymized description"
  inputField118: Int!
  "This is an anonymized description"
  inputField119: Int!
}

input Input3599 {
  inputField120: String
  inputField110: String
  inputField111: String
  inputField121: String
  inputField135: Input3597!
  inputField123: Input50
  inputField125: String
  inputField126: String
}