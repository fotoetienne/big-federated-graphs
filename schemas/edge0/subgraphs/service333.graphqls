type Type8098 {
  field567: Float!
  field200: String
  field568: ID
  field569: ID!
  field570: String!
  field571: String!
  field572: ID
  field573: ID!
  field100: Enum1927!
  field58: String
}

type Type8099 {
  field177: [Type8100!]
  field379: Type119!
}

type Type8100 {
  field382: String
  field178: Type8098!
}

type Mutation @extends {
  field16818(arg20: Input3601!): Type8101!
}

type Type119 {
  field582: String
  field583: Boolean!
  field584: Boolean!
  field585: String
}

type Query @extends {
  field16819(arg49: ID!): Type8098
  field16820(arg20: Input48!): Type8099!
}

type Type8101 {
  field588: Type8098
}

enum Enum1927 {
  VALUE_212
  VALUE_164
  VALUE_171
  VALUE_165
  VALUE_162
}

input Input3599 {
  inputField599: Input3600
}

input Input3600 {
  inputField64: String
}

input Input48 {
  inputField113: String!
  inputField114: Boolean! = false
}

input Input50 {
  "This is an anonymized description"
  inputField116: String
  "This is an anonymized description"
  inputField117: Int!
  "This is an anonymized description"
  inputField118: Int!
  "This is an anonymized description"
  inputField119: Int!
}

input Input3601 {
  inputField120: String
  inputField110: String
  inputField111: String
  inputField121: String
  inputField135: Input3599!
  inputField123: Input50
  inputField125: String
  inputField126: String
}