type Mutation @extends {
  field2054(arg1: Input337!): Type689!
}

type Type122 {
  field269: String
  field270: Boolean!
  field271: Boolean!
  field272: String
}

type Query @extends {
  field2055(arg33: ID!): Type690
  field2056(arg1: Input48!): Type691!
}

type Type689 {
  field275: Type690
}

type Type690 {
  field252: Float!
  field253: String
  field254: ID
  field255: ID!
  field256: String!
  field257: String!
  field258: ID
  field259: ID!
  field260: Enum218!
  field44: String
}

type Type691 {
  field36: [Type692!]
  field37: Type122!
}

type Type692 {
  field41: String
  field40: Type690!
}

enum Enum218 {
  VALUE_199
  VALUE_151
  VALUE_158
  VALUE_152
  VALUE_149
}

input Input48 {
  inputField106: String!
  inputField107: Boolean! = false
}

input Input50 {
  "This is an anonymized description"
  inputField109: String
  "This is an anonymized description"
  inputField110: Int!
  "This is an anonymized description"
  inputField111: Int!
  "This is an anonymized description"
  inputField112: Int!
}

input Input337 {
  inputField113: String
  inputField103: String
  inputField104: String
  inputField114: String
  inputField128: Input338!
  inputField116: Input50
  inputField118: String
  inputField119: String
}

input Input338 {
  inputField812: String!
  inputField813: Boolean!
}
