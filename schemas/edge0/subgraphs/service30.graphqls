type Type429 {
  field567: Float!
  field200: String
  field213: Type432!
  field568: ID
  field569: ID!
  field570: String!
  field571: String!
  field572: ID
  field573: ID!
  field100: Enum126!
  field58: String
}

type Type430 {
  field177: [Type431!]
  field379: Type119!
}

type Type431 {
  field382: String
  field178: Type429!
}

type Type29 @extends @key(fields: "field109") {
  field109: Int! @external
}

type Type432 {
  field177: [Type433!]
  field379: Type119!
}

type Type433 {
  field382: String
  field178: Type29!
}

type Mutation @extends {
  field1433(arg20: Input156!): Type434!
}

type Type119 {
  field582: String
  field583: Boolean!
  field584: Boolean!
  field585: String
}

type Query @extends {
  field1434(arg49: ID!): Type429
  field1435(arg20: Input48!): Type430!
}

type Type434 {
  field588: Type429
}

enum Enum126 {
  VALUE_212
  VALUE_164
  VALUE_171
  VALUE_165
  VALUE_162
}

input Input155 {
  inputField187: Int!
}

input Input48 {
  inputField113: String!
  inputField114: Boolean! = false
}

input Input50 {
  "This is an anonymized description"
  inputField116: String
  "This is an anonymized description"
  inputField117: Int!
  "This is an anonymized description"
  inputField118: Int!
  "This is an anonymized description"
  inputField119: Int!
}

input Input156 {
  inputField120: String
  inputField110: String
  inputField111: String
  inputField121: String
  inputField135: Input155!
  inputField123: Input50
  inputField125: String
  inputField126: String
}