type Type429 {
  field554: Float!
  field198: String
  field209: Type432!
  field555: ID
  field556: ID!
  field557: String!
  field558: String!
  field559: ID
  field560: ID!
  field100: Enum125!
  field58: String
}

type Type430 {
  field176: [Type431!]
  field366: Type119!
}

type Type431 {
  field369: String
  field177: Type429!
}

type Type29 @extends @key(fields: "field109") {
  field109: Int! @external
}

type Type432 {
  field176: [Type433!]
  field366: Type119!
}

type Type433 {
  field369: String
  field177: Type29!
}

type Mutation @extends {
  field1419(arg20: Input156!): Type434!
}

type Type119 {
  field569: String
  field570: Boolean!
  field571: Boolean!
  field572: String
}

type Query @extends {
  field1420(arg49: ID!): Type429
  field1421(arg20: Input48!): Type430!
}

type Type434 {
  field575: Type429
}

enum Enum125 {
  VALUE_212
  VALUE_164
  VALUE_171
  VALUE_165
  VALUE_162
}

input Input155 {
  inputField187: Int!
}

input Input48 {
  inputField113: String!
  inputField114: Boolean! = false
}

input Input50 {
  "This is an anonymized description"
  inputField116: String
  "This is an anonymized description"
  inputField117: Int!
  "This is an anonymized description"
  inputField118: Int!
  "This is an anonymized description"
  inputField119: Int!
}

input Input156 {
  inputField120: String
  inputField110: String
  inputField111: String
  inputField121: String
  inputField135: Input155!
  inputField123: Input50
  inputField125: String
  inputField126: String
}