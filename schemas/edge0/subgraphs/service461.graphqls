type Type11026 {
  field24029: [Type11029]
  field1988: String
  field24030: Boolean!
  field24031: [Type11029]
  field24032: [Type11029]
  field24033: [Type11031]
}

type Type11027 {
  field177: [Type11028!]
  field379: Type119!
}

type Type11028 {
  field382: String
  field178: Type11026!
}

type Type11029 {
  field24034: String
  field806: [Type11030]
  field5260: String
  field11: String
  field690: String
  field3366: String
  field1389: Int
}

type Type11030 {
  field319: String!
  field24035: [String]
  field2562: String!
  field418: String!
}

type Type11031 {
  field319: String!
  field2562: String!
  field418: String!
  field80: String!
}

type Type11032 {
  field24036: Type11027!
  field567: Float!
  field200: String
  field568: ID
  field569: ID!
  field570: String!
  field571: String!
  field572: ID
  field573: ID!
  field100: Enum2728!
  field58: String
}

type Type11033 {
  field177: [Type11034!]
  field379: Type119!
}

type Type11034 {
  field382: String
  field178: Type11032!
}

type Mutation @extends {
  field24037(arg20: Input5056!): Type446!
}

type Type119 {
  field582: String
  field583: Boolean!
  field584: Boolean!
  field585: String
}

type Query @extends {
  field24038(arg49: ID!): Type11032
  field24039(arg20: Input48!): Type11033!
}

type Type446 {
  field576: String!
  field100: String!
}

enum Enum2728 {
  VALUE_212
  VALUE_164
  VALUE_1459
  VALUE_171
  VALUE_165
  VALUE_162
  VALUE_8596
  VALUE_8597
}

input Input5056 {
  inputField110: String
  inputField111: String
  inputField112: String!
}

input Input48 {
  inputField113: String!
  inputField114: Boolean! = false
}