type Type11020 {
  field24002: [Type11023]
  field1974: String
  field24003: Boolean!
  field24004: [Type11023]
  field24005: [Type11023]
  field24006: [Type11025]
}

type Type11021 {
  field176: [Type11022!]
  field366: Type119!
}

type Type11022 {
  field369: String
  field177: Type11020!
}

type Type11023 {
  field24007: String
  field793: [Type11024]
  field5242: String
  field11: String
  field677: String
  field3352: String
  field1375: Int
}

type Type11024 {
  field308: String!
  field24008: [String]
  field2548: String!
  field405: String!
}

type Type11025 {
  field308: String!
  field2548: String!
  field405: String!
  field80: String!
}

type Type11026 {
  field24009: Type11021!
  field554: Float!
  field198: String
  field555: ID
  field556: ID!
  field557: String!
  field558: String!
  field559: ID
  field560: ID!
  field100: Enum2725!
  field58: String
}

type Type11027 {
  field176: [Type11028!]
  field366: Type119!
}

type Type11028 {
  field369: String
  field177: Type11026!
}

type Mutation @extends {
  field24010(arg20: Input5054!): Type446!
}

type Type119 {
  field569: String
  field570: Boolean!
  field571: Boolean!
  field572: String
}

type Query @extends {
  field24011(arg49: ID!): Type11026
  field24012(arg20: Input48!): Type11027!
}

type Type446 {
  field563: String!
  field100: String!
}

enum Enum2725 {
  VALUE_212
  VALUE_164
  VALUE_1454
  VALUE_171
  VALUE_165
  VALUE_162
  VALUE_8593
  VALUE_8594
}

input Input5054 {
  inputField110: String
  inputField111: String
  inputField112: String!
}

input Input48 {
  inputField113: String!
  inputField114: Boolean! = false
}