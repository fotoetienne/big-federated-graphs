type Type15894 {
  field3113: String
  field559: String
  field3112: String
}

type Type15895 {
  field36: [Type15896!]
  field37: Type122!
}

type Type15896 {
  field41: String
  field40: Type15894!
}

type Type2979 @key(fields: "field255") {
  field252: Float!
  field253: String
  field31839: Type15895!
  field254: ID
  field255: ID!
  field256: String!
  field257: String!
  field258: ID
  field259: ID!
  field260: Enum3834!
  field44: String
}

type Type15897 {
  field36: [Type15898!]
  field37: Type122!
}

type Type15898 {
  field41: String
  field40: Type2979!
}

type Mutation @extends {
  field31840(arg1: Input7538!): Type15899!
}

type Type122 {
  field269: String
  field270: Boolean!
  field271: Boolean!
  field272: String
}

type Query @extends {
  field31841(arg33: ID!): Type2979
  field31842(arg1: Input48!): Type15897!
}

type Type15899 {
  field275: Type2979
}

enum Enum3834 {
  VALUE_199
  VALUE_151
  VALUE_158
  VALUE_152
  VALUE_149
}

input Input7533 {
  inputField10939: Input7534!
}

input Input7534 {
  inputField10940: Input7535!
}

input Input7535 {
  inputField10200: String!
}

input Input7536 {
  inputField4926: String!
  inputField4866: Input7537
}

input Input7537 {
  inputField10941: Input7533!
}

input Input48 {
  inputField106: String!
  inputField107: Boolean! = false
}

input Input50 {
  "This is an anonymized description"
  inputField109: String
  "This is an anonymized description"
  inputField110: Int!
  "This is an anonymized description"
  inputField111: Int!
  "This is an anonymized description"
  inputField112: Int!
}

input Input7538 {
  inputField113: String
  inputField103: String
  inputField104: String
  inputField114: String
  inputField128: Input7536!
  inputField116: Input50
  inputField118: String
  inputField119: String
}
