extend type Query {
  field2067(arg191: Int = 0): [Type981] @experimental
}

type Type981 {
  field2067(arg191: Int = 0): [Type981]
  field2068(arg1: String = "default"): String
  field727(arg192: Int = 0): Type981
}

type Query @extends {
  field2069(arg193: ID!): Type982 @experimental
}

type Mutation @extends {
  field2070(arg193: ID!): Type982 @experimental
  field2071(arg1: Input239): Type985 @experimental
  field2072: Type985 @experimental
}

type Subscription @extends {
  field2073(arg193: ID!, arg194: ID, arg195: Int): Interface55 @experimental
}

type Type982 {
  field2: ID
  field75: String
}

type Type983 {
  field2: ID
  field75: String
  field736: Enum268
}

enum Enum268 {
  VALUE_24
  VALUE_1466
}

interface Interface55 {
  field2074: ID
}

type Type984 implements Interface55 {
  field2074: ID
  field270: String
  field989: ID
}

type Type985 {
  field736: Enum269
}

enum Enum269 {
  VALUE_459
  VALUE_1467
}

input Input239 {
  inputField595: ID!
  inputField91: ID!
  inputField596: String!
}