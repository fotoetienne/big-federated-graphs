"""
This is an anonymized description
"""
scalar ID

scalar Scalar14

input Input141 {
  inputField346: ID
  inputField347: ID
  inputField348: ID
  inputField159: ID
  inputField349: ID
  inputField350: String
  inputField351: String
}

type Type42 @key(fields: "field627 field2") {
  field2: ID!
  field627: Enum15
  field814: Boolean!
  field902: Type593
  field1326: Union43
}

type Type593 {
  field216: String!
  field289: Enum169
}

enum Enum169 {
  VALUE_1296
  VALUE_1297
  VALUE_1298
}

type Type594 {
  field1327: Boolean
  field1328: Boolean
}

type Mutation {
  field1329(arg115: Input142!, arg123: Input141!): Type42!
  field1330(arg115: Input143!, arg123: Input141!): Type42!
}

type Query {
  field1331(arg123: Input141!): Type594!
}

input Input142 {
  inputField352: Boolean
  inputField353: Boolean
}

input Input143 {
  inputField354: Boolean
  inputField355: Boolean
}

type Type595 {
  field1332: Scalar14
  field1333: Scalar14
  field1334: String
  field1335: String
  field1336: Scalar14
  field1337: String
  field1338: String
  field1027: String
  field1339: String
  field1340: String
  field1341: String
  field1342: String
  field1343: String
  field1344: Scalar14
}

extend type Mutation {
  field1345(arg115: Input144!, arg123: Input141!): Type42!
  field1346(arg115: Input145!, arg123: Input141!): Type42!
}

extend type Query {
  field1347(arg123: Input141!): Type595!
}

input Input144 {
  inputField356: Boolean
  inputField357: Boolean
  inputField358: Boolean
  inputField359: Boolean
  inputField360: Boolean
  inputField361: Boolean
  inputField362: Boolean
  inputField363: Boolean
  inputField364: Boolean
  inputField365: Boolean
  inputField366: Boolean
  inputField367: Boolean
  inputField368: Boolean
  inputField369: Boolean
}

input Input145 {
  inputField370: Scalar14
  inputField371: Scalar14
  inputField372: String
  inputField373: String
  inputField374: Scalar14
  inputField375: String
  inputField376: String
  inputField114: String
  inputField377: String
  inputField378: String
  inputField379: String
  inputField380: String
  inputField381: String
  inputField382: Scalar14
}

type Type596 {
  field1348: String
  field1349: String
  field1350: Scalar14
  field1351: Int
  field1352: Int
  field1353: Int
  field1354(arg124: [Input146!]): [Type597!]
  field1355(arg124: [Input147!]): [Type598!]
  field1356: Scalar14
  field1357(arg124: [Input148!]): [Type599!]
  field1358(arg124: [Input149!]): [Type600!]
  field1359(arg124: [Input150!]): [Type601!]
  field1360(arg124: [Input151!]): [Type602!]
  field1361: Scalar14
  field1362: String
  field1363: String
  field1364: String
  field1365: Int
}

type Type597 {
  field82: String!
  field28: String!
  field1366: String!
}

type Type598 {
  field82: String!
  field28: String!
  field1366: String!
}

type Type599 {
  field82: String!
  field28: String!
}

type Type600 {
  field82: String!
  field28: String!
}

type Type601 {
  field1367: String!
  field82: String!
  field28: String!
}

type Type602 {
  field1367: String!
  field82: String!
  field28: String!
}

extend type Mutation {
  field1368(arg115: Input152!, arg123: Input141!): Type42!
  field1369(arg115: Input159!, arg123: Input141!): Type42!
}

extend type Query {
  field1370(arg123: Input141!): Type596!
}

input Input146 {
  inputField60: String!
  inputField383: String!
}

input Input147 {
  inputField60: String!
  inputField383: String!
}

input Input148 {
  inputField60: String!
}

input Input149 {
  inputField60: String!
}

input Input150 {
  inputField384: String!
  inputField60: String!
}

input Input151 {
  inputField384: String!
  inputField60: String!
}

input Input152 {
  inputField385: Boolean
  inputField386: Boolean
  inputField387: Boolean
  inputField388: Boolean
  inputField389: Boolean
  inputField390: Boolean
  inputField391: [Input153!]
  inputField392: [Input154!]
  inputField393: Boolean
  inputField394: [Input155!]
  inputField395: [Input156!]
  inputField396: [Input157!]
  inputField397: [Input158!]
  inputField398: Boolean
  inputField399: Boolean
  inputField400: Boolean
  inputField401: Boolean
  inputField402: Boolean
}

input Input153 {
  inputField60: String!
  inputField383: String!
}

input Input154 {
  inputField60: String!
  inputField383: String!
}

input Input155 {
  inputField60: String!
}

input Input156 {
  inputField60: String!
}

input Input157 {
  inputField384: String!
  inputField60: String!
}

input Input158 {
  inputField384: String!
  inputField60: String!
}

input Input159 {
  inputField403: String
  inputField404: String
  inputField405: Scalar14
  inputField406: Int
  inputField407: Int
  inputField408: Int
  inputField409: [Input160!]
  inputField410: [Input161!]
  inputField411: Scalar14
  inputField412: [Input162!]
  inputField413: [Input163!]
  inputField414: [Input164!]
  inputField415: [Input165!]
  inputField416: Scalar14
  inputField417: String
  inputField418: String
  inputField419: String
  inputField420: Int
}

input Input160 {
  inputField60: String!
  inputField29: String!
  inputField383: String!
}

input Input161 {
  inputField60: String!
  inputField29: String!
  inputField383: String!
}

input Input162 {
  inputField60: String!
  inputField29: String!
}

input Input163 {
  inputField60: String!
  inputField29: String!
}

input Input164 {
  inputField384: String!
  inputField60: String!
  inputField29: String!
}

input Input165 {
  inputField384: String!
  inputField60: String!
  inputField29: String!
}

type Type603 {
  field1371: Boolean
  field1372: Boolean
  field1373: Boolean
  field1374: Boolean
  field1375: Boolean
  field1376: Boolean
  field1377: Boolean
  field1378: Boolean
  field1379: Boolean
  field1380: Boolean
  field1381: Boolean
}

extend type Mutation {
  field1382(arg115: Input166!, arg123: Input141!): Type42!
  field1383(arg115: Input167!, arg123: Input141!): Type42!
}

extend type Query {
  field1384(arg123: Input141!): Type603!
}

input Input166 {
  inputField421: Boolean
  inputField422: Boolean
  inputField423: Boolean
  inputField424: Boolean
  inputField425: Boolean
  inputField426: Boolean
  inputField427: Boolean
  inputField428: Boolean
  inputField429: Boolean
  inputField430: Boolean
  inputField431: Boolean
}

input Input167 {
  inputField432: Boolean
  inputField433: Boolean
  inputField434: Boolean
  inputField435: Boolean
  inputField436: Boolean
  inputField437: Boolean
  inputField438: Boolean
  inputField439: Boolean
  inputField440: Boolean
  inputField441: Boolean
  inputField442: Boolean
}

type Type604 {
  field1385: String!
  field28: Boolean!
}

type Type605 {
  field8: String!
  field28: String!
}

type Type606 {
  field1386(arg124: [Input172!]): [Type604!]
  "This is an anonymized description"
  field1387(
  arg124: [Input173!]): [Type605!]
  field1167(arg124: [Input174!]): [Type607!]
}

type Type607 {
  field8: String!
  field28: String!
}

extend type Mutation {
  field1388(arg115: Input170!, arg123: Input141!): Type42!
  field1389(arg115: Input177!, arg123: Input141!): Type42!
}

extend type Query {
  field1390(arg123: Input141!): Type606!
}

input Input168 {
  inputField169: String!
}

input Input169 {
  inputField17: String!
}

input Input170 {
  inputField443: [Input168!]
  inputField444: [Input169!]
  inputField445: [Input171!]
}

input Input171 {
  inputField17: String!
}

input Input172 {
  inputField169: String!
}

input Input173 {
  inputField17: String!
}

input Input174 {
  inputField17: String!
}

input Input175 {
  inputField169: String!
  inputField29: Boolean!
}

input Input176 {
  inputField17: String!
  inputField29: String!
}

input Input177 {
  inputField446: [Input175!]
  inputField447: [Input176!]
  inputField248: [Input178!]
}

input Input178 {
  inputField17: String!
  inputField29: String!
}

type Type608 {
  field1391: String
  field1392: String
  field1393: String
  field1394: String
  field1395: String
  field620: String
  field1396: Boolean
  "This is an anonymized description"
  field1397: String
  field640: String
  field610: String
  field1398: String
  "This is an anonymized description"
  field1399(
  arg124: [Input181!]): [Type609!]
}

type Type609 {
  field1400: String!
  field28: String!
}

extend type Mutation {
  field1401(arg115: Input179!, arg123: Input141!): Type42!
  field1402(arg115: Input182!, arg123: Input141!): Type42!
}

extend type Query {
  field1403(arg123: Input141!): Type608!
}

input Input179 {
  inputField448: Boolean
  inputField449: Boolean
  inputField450: Boolean
  inputField451: Boolean
  inputField452: Boolean
  inputField453: Boolean
  inputField454: Boolean
  "This is an anonymized description"
  inputField455: Boolean
  inputField456: Boolean
  inputField457: Boolean
  inputField458: Boolean
  inputField459: [Input180!]
}

input Input180 {
  inputField460: String!
}

input Input181 {
  inputField460: String!
}

input Input182 {
  inputField461: String
  inputField462: String
  inputField463: String
  inputField464: String
  inputField465: String
  inputField466: String
  inputField467: Boolean
  "This is an anonymized description"
  inputField468: String
  inputField45: String
  inputField469: String
  inputField470: String
  inputField471: [Input183!]
}

input Input183 {
  inputField460: String!
  inputField29: String!
}

type Type610 {
  field640: String!
  field733: String!
  field28: Boolean!
}

type Type611 {
  "This is an anonymized description"
  field1404: String
  field1405(arg124: [Input186!]): [Type610!]
  field1406: Boolean
  "This is an anonymized description"
  field1407: String
  "This is an anonymized description"
  field1408: String
  field1409: Scalar14
  field1410: Boolean
  field1411: Scalar14
  field1412: String
  field1413: String
  field1414: String
  field1415: Boolean
}

extend type Mutation {
  field1416(arg115: Input185!, arg123: Input141!): Type42!
  field1417(arg115: Input188!, arg123: Input141!): Type42!
}

extend type Query {
  field1418(arg123: Input141!): Type611!
}

input Input184 {
  inputField45: String!
  inputField39: String!
}

input Input185 {
  inputField472: [Input184!]
  inputField473: Boolean
  "This is an anonymized description"
  inputField474: Boolean
  "This is an anonymized description"
  inputField475: Boolean
  inputField476: Boolean
  inputField477: Boolean
  inputField478: Boolean
  inputField479: Boolean
  inputField480: Boolean
  "This is an anonymized description"
  inputField481: Boolean
  inputField482: Boolean
  inputField483: Boolean
}

input Input186 {
  inputField45: String!
  inputField39: String!
}

input Input187 {
  inputField45: String!
  inputField39: String!
  inputField29: Boolean!
}

input Input188 {
  "This is an anonymized description"
  inputField484: String
  inputField485: [Input187!]
  inputField486: Boolean
  "This is an anonymized description"
  inputField487: String
  "This is an anonymized description"
  inputField488: String
  inputField489: Scalar14
  inputField490: Boolean
  inputField491: Scalar14
  inputField492: String
  inputField493: String
  inputField494: String
  inputField495: Boolean
}

type Type612 {
  "This is an anonymized description"
  field1419: Boolean
  "This is an anonymized description"
  field1420: Int
}

extend type Mutation {
  field1421(arg115: Input189!, arg123: Input141!): Type42!
  field1422(arg115: Input190!, arg123: Input141!): Type42!
}

extend type Query {
  field1423(arg123: Input141!): Type612!
}

input Input189 {
  "This is an anonymized description"
  inputField496: Boolean
  "This is an anonymized description"
  inputField497: Boolean
}

input Input190 {
  "This is an anonymized description"
  inputField498: Boolean
  "This is an anonymized description"
  inputField499: Int
}

extend type Mutation {
  field1424(arg115: Input191!, arg123: Input141!): Type42!
  field1425(arg115: Input192!, arg123: Input141!): Type42!
}

"This is an anonymized description"
type Type613 {
  field1426: String
  field1427: Scalar14
}

extend type Query {
  field1428(arg123: Input141!): Type613!
}

"This is an anonymized description"
input Input191 {
  inputField500: Boolean
  inputField501: Boolean
}

"This is an anonymized description"
input Input192 {
  inputField502: String
  inputField503: Scalar14
}

extend type Mutation {
  field1429(arg115: Input193!, arg123: Input141!): Type42!
  field1430(arg115: Input200!, arg123: Input141!): Type42!
}

type Type614 {
  field1431: Boolean
  field1432: Int
  field1433: Boolean
  field1434: String
  field1435(arg124: [Input197!]): [Type615!]
  field1436(arg124: [Input198!]): [Type616!]
  field1437(arg124: [Input199!]): [Type617!]
  field1438: Int
  field1439: Boolean
  field1440: String
  field1441: Boolean
  field1442: Boolean
  field1443: String
}

type Type615 {
  field28: String!
  field7: String!
}

type Type616 {
  field28: String!
  field7: String!
}

type Type617 {
  field28: String!
  field7: String!
}

extend type Query {
  field1444(arg123: Input141!): Type614!
}

input Input193 {
  inputField504: Boolean
  inputField505: Boolean
  inputField506: Boolean
  inputField507: Boolean
  inputField508: [Input194!]
  inputField509: [Input195!]
  inputField510: [Input196!]
  inputField511: Boolean
  inputField512: Boolean
  inputField513: Boolean
  inputField514: Boolean
  inputField515: Boolean
  inputField516: Boolean
}

input Input194 {
  inputField517: String!
}

input Input195 {
  inputField517: String!
}

input Input196 {
  inputField517: String!
}

input Input197 {
  inputField517: String!
}

input Input198 {
  inputField517: String!
}

input Input199 {
  inputField517: String!
}

input Input200 {
  inputField518: Boolean
  inputField519: Int
  inputField520: Boolean
  inputField521: String
  inputField522: [Input201!]
  inputField523: [Input202!]
  inputField524: [Input203!]
  inputField525: Int
  inputField526: Boolean
  inputField527: String
  inputField528: Boolean
  inputField529: Boolean
  inputField530: String
}

input Input201 {
  inputField29: String!
  inputField517: String!
}

input Input202 {
  inputField29: String!
  inputField517: String!
}

input Input203 {
  inputField29: String!
  inputField517: String!
}

extend type Mutation {
  field1445(arg115: Input204!, arg123: Input141!): Type42!
  field1446(arg115: Input205!, arg123: Input141!): Type42!
}

extend type Query {
  field1447(arg123: Input141!): Type618!
}

type Type618 {
  field1448: String
  field1449: String
  field1450: String
  field1451: String
  field1452: String
  field1453: String
  field1454: String
  field1455: String
  field1456: String
  field1457: String
}

input Input204 {
  inputField531: Boolean
  inputField532: Boolean
  inputField533: Boolean
  inputField534: Boolean
  inputField535: Boolean
  inputField536: Boolean
  inputField537: Boolean
  inputField538: Boolean
  inputField539: Boolean
  inputField540: Boolean
}

input Input205 {
  inputField541: String
  inputField542: String
  inputField543: String
  inputField544: String
  inputField545: String
  inputField546: String
  inputField547: String
  inputField548: String
  inputField549: String
  inputField550: String
}

extend type Mutation {
  field1458(arg115: Input206!, arg123: Input141!): Type42!
  field1459(arg115: Input207!, arg123: Input141!): Type42!
}

extend type Query {
  field1460(arg123: Input141!): Type619!
}

type Type619 {
  "This is an anonymized description"
  field1461: Scalar14
}

input Input206 {
  "This is an anonymized description"
  inputField551: Boolean
}

input Input207 {
  "This is an anonymized description"
  inputField552: Scalar14
}

enum Enum15 {
  VALUE_371
  VALUE_372
  VALUE_373
  VALUE_374
  VALUE_375
  VALUE_376
  VALUE_377
  VALUE_378
  VALUE_379
  VALUE_380
  VALUE_381
  VALUE_382
  VALUE_383
  VALUE_384
  VALUE_385
}

union Union43 = Type594 | Type595 | Type596 | Type603 | Type606 | Type608 | Type611 | Type612 | Type613 | Type614 | Type619 | Type620 | Type618 | Type621 | Type623

extend type Mutation {
  field1462(arg115: Input208!, arg123: Input141!): Type42!
  field1463(arg115: Input209!, arg123: Input141!): Type42!
}

extend type Query {
  field1464(arg123: Input141!): Type620!
}

"This is an anonymized description"
type Type620 {
  "This is an anonymized description"
  field1465: String
}

"This is an anonymized description"
input Input208 {
  "This is an anonymized description"
  inputField553: Boolean
}

"This is an anonymized description"
input Input209 {
  "This is an anonymized description"
  inputField554: String
}

extend type Mutation {
  field1466(arg115: Input210!, arg123: Input141!): Type42!
  field1467(arg115: Input213!, arg123: Input141!): Type42!
}

extend type Query {
  field1468(arg123: Input141!): Type621!
}

type Type621 {
  field1469: Boolean
  field1470(arg124: [Input212!]): [Type622!]
}

type Type622 {
  field1471: String!
  field1472: String!
  field28: String!
}

input Input210 {
  inputField555: Boolean
  inputField556: [Input211!]
}

input Input211 {
  inputField557: String!
  inputField558: String!
}

input Input212 {
  inputField557: String!
  inputField558: String!
}

input Input213 {
  inputField559: Boolean
  inputField560: [Input214!]
}

input Input214 {
  inputField557: String!
  inputField558: String!
  inputField29: String!
}

extend type Mutation {
  field1473(arg115: Input215!, arg123: Input141!): Type42!
  field1474(arg115: Input218!, arg123: Input141!): Type42!
}

extend type Query {
  field1475(arg123: Input141!): Type623!
}

type Type623 {
  field1476(arg124: [Input217!]): [Type624!]
}

type Type624 {
  field1477: String!
  field1478: String!
  field1479: String!
  field28: String!
  field1480: String!
}

input Input215 {
  inputField561: [Input216!]
}

input Input216 {
  inputField562: String!
  inputField563: String!
  inputField564: String!
  inputField565: String!
}

input Input217 {
  inputField562: String!
  inputField563: String!
  inputField564: String!
  inputField565: String!
}

input Input218 {
  inputField566: [Input219!]
}

input Input219 {
  inputField562: String!
  inputField563: String!
  inputField564: String!
  inputField29: String!
  inputField565: String!
}